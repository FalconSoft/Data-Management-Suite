using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using FalconSoft.ReactiveWorksheets.Common;

namespace ReactiveWorksheets.ExternalDataSources.ExternalSources
{
    public class QuotesFeedDataProvider : IDataProvider
    {
        private readonly Timer _timer;
        private const int _count = 799;
        private List<QuotesFeed> _quotesFeedData = new List<QuotesFeed>();

        List<int> _secId = new List<int> { 140952, 138811, 138971, 138998, 139003, 139145, 139718, 140399,
            147271, 147693, 152189, 152395, 199549, 205395, 205482, 219985, 224797, 217320, 215262, 216304,
            226776, 229798, 237537, 234953, 239184, 232352, 238918, 242556, 243947, 243960, 241616, 242811,
            246997, 210390, 229807, 219365, 250460, 250291, 259868, 261598, 261202, 258795, 266957, 266132, 
            269843, 254010, 276477, 280275, 283077, 283656, 283832, 285303, 280824, 282238, 211470, 258692, 
            289777, 293129, 293189, 293504, 293715, 294099, 294210, 294470, 288598, 282378, 296955, 259574,
            289969, 298470, 291092, 299475, 300901, 298200, 299513, 301978, 301979, 299518, 155148, 303263, 
            304166, 305509, 304000, 304568, 308248, 205388, 146923, 305620, 308986, 309431, 310772, 311205,
            308988, 291115, 311595, 212238, 321976, 314097, 317072, 311368, 326885, 327548, 329883, 330153, 
            328114, 331740, 331939, 332775, 332782, 317791, 333157, 333168, 332144, 333629, 333715, 333735, 
            334360, 334363, 336224, 326702, 336274, 336194, 336228, 336354, 336263, 336529, 326344, 214116,
            314185, 338037, 340778, 338362, 342504, 325829, 326040, 199552, 343955, 343956, 348437, 348880, 
            344047, 344057, 349671, 344062, 324572, 344924, 214122, 316672, 311241, 346475, 345443, 346386,
            353889, 368781, 355343, 369208, 372527, 372974, 374013, 375163, 373751, 375762, 372550, 377243,
            372552, 358257, 354071, 359470, 357612, 368060, 377663, 376310, 377656, 377669, 379552, 377698,
            377435, 371766, 379744, 379676, 372569, 378216, 385317, 385321, 383804, 378212, 378650, 387290,
            367824, 386884, 383591, 385242, 385738, 385342, 388921, 389757, 389722, 387355, 387412, 388950,
            389793, 389987, 394031, 395517, 399348, 389943, 394882, 399436, 394963, 405219, 394961, 403564, 
            402814, 390212, 390403, 391506, 386682, 389170, 406556, 405633, 390485, 411015, 405457, 409006,
            411614, 409423, 411874, 411900, 412392, 412333, 412415, 412229, 412480, 412412, 412557, 405465,
            411037, 412607, 410216, 410610, 412957, 410331, 413854, 413883, 413223, 414358, 414591, 413105,
            415643, 413690, 412932, 390605, 413885, 367842, 415736, 416048, 416213, 418915, 416444, 424148,
            424234, 424387, 424389, 424090, 416059, 413641, 424538, 424165, 418486, 424823, 426442, 426446,
            426445, 423710, 424835, 426677, 426712, 426756, 426758, 426108, 426723, 427004, 426724, 426432,
            427059, 426700, 414222, 410662, 428846, 428863, 434796, 434801, 428861, 410767, 346474, 424572,
            429641, 429712, 430006, 430377, 440240, 440238, 440551, 444183, 444849, 445564, 451225, 452314,
            458276, 455122, 442570, 441386, 458520, 458892, 441478, 458538, 431697, 461246, 460724, 416234,
            469886, 441526, 441745, 441818, 468595, 432028, 470751, 476150, 477149, 477193, 476171, 482709,
            471481, 483705, 483524, 486620, 490679, 486211, 492612, 483706, 484592, 472254, 468842, 466634,
            496294, 468639, 416326, 501762, 473972, 501743, 503102, 520597, 515164, 526235, 516555, 534074,
            530920, 534796, 536001, 536846, 537311, 534234, 538383, 526906, 530887, 541233, 542861, 544101, 
            544740, 545246, 545289, 544139, 544067, 547896, 544107, 523471, 558507, 554939, 559426, 552523,
            558602, 556996, 559980, 560964, 562368, 563780, 563922, 564205, 564208, 564217, 564225, 560970, 
            564187, 563570, 564262, 564247, 564259, 505696, 558858, 511665, 564333, 564329, 564357, 564372, 
            564390, 564391, 564400, 564404, 564398, 564399, 564374, 564316, 564591, 564596, 564604, 564285, 
            564311, 514577, 565097, 567083, 568043, 568516, 476143, 476200, 565093, 519878, 476329, 156989, 
            163164, 575870, 589215, 572566, 200003, 591964, 590021, 591194, 592426, 572969, 578349, 593485, 
            578747, 596320, 593762, 598064, 596908, 600030, 600789, 601164, 602351, 612451, 612876, 612894,
            603986, 601689, 619813, 619814, 619815, 619817, 619818, 619587, 619819, 619822, 619823, 619824,
            619826, 619828, 619831, 619838, 619816, 619821, 596037, 607573, 596779, 619846, 573669, 631106,
            642707, 647666, 647880, 649182, 649248, 649253, 642871, 649456, 648640, 650248, 651619, 650247,
            628380, 650614, 648822, 648863, 600254, 655520, 569057, 647604, 519725, 674989, 696242, 683591,
            706433, 711074, 715692, 720703, 721016, 721218, 575405, 723257, 664547, 714100, 733910, 738603,
            739970, 740363, 736957, 742014, 741199, 743783, 749472, 749831, 752300, 719588, 754892, 743595,
            756549, 758407, 771182, 758090, 757193, 779660, 780172, 791769, 795126, 788805, 797037, 810114, 
            817193, 819908, 819938, 810631, 813055, 822561, 822827, 737605, 828293, 734803, 841044, 841247, 
            841103, 866272, 877071, 887544, 888478, 888479, 888483, 877076, 841320, 830361, 840608, 910322,
            714614, 898964, 684130, 949810, 964065, 956014, 961220, 972823, 1046089, 1047119, 1103157, 1105649, 
            1105655, 1105660, 1105650, 953416, 674232, 1105668, 1105664, 1105669, 1105673, 1105675, 680327, 
            1109132, 1109138, 1109139, 1109141, 1109143, 961208, 1109145, 680095, 1099917, 1070735, 1098466,
            1163193, 1163271, 1167744, 1167777, 1167782, 1109762, 1140255, 1188214, 1179893, 1251599, 1243086,
            1252229, 1252223, 1198832, 1266300, 1262024, 1274155, 1245173, 1290982, 1290977, 1290973, 1268156,
            685736, 1152361, 1328949, 1150042, 1396834, 1337048, 1429306, 1396342, 1438459, 1157608, 1162900, 
            580031, 1469610, 1397843, 1507190, 1597745, 1635962, 1630812, 1636666, 1664297, 1673923, 1674516,
            1673865, 1671904, 1551905, 1637932, 1677789, 1789396, 1765279, 1801072, 1402933, 1859351, 1883022,
            1868241, 1897505, 1897503, 1846893, 1949470, 1996835, 1944190, 2111128, 2109713, 2120716, 2122342,
            2122856, 2127898, 2128074, 2108792, 2133317, 2116729, 2027401, 2159328, 2143264, 2159293, 2109718,
            1562504, 2216704, 2213544, 1515358, 2233116, 2228698, 2233368, 2233397, 2242837, 2249240, 2280168,
            2282524, 2301313, 2366156, 2389179, 2381540, 2224890, 2351761, 2398176, 2396747, 2427664, 2427202,
            2472913, 2472921, 2468459, 2476111, 2228697, 2401769, 1860958, 2459953, 1405727, 2489879, 2511673,
            2512214, 2504899, 2540072, 2546511, 2561883, 2556220, 2563899, 2565030, 2562063, 2481815, 2508923,
            2555588, 2578494, 2578648, 2598259, 2596310, 2598325, 2508928, 2233364, 2236774, 1116612, 2603642,
            2614728, 409015, 2624998, 2676870, 2692791, 2693000, 2625406, 2705913, 2706353, 2692999, 2683563, 
            2510324, 2687730, 2727130, 2692803, 2727527, 2772644, 2772632, 2776191, 2776465, 2784017, 2732034,
            2801052, 2761145, 2850201, 2864978, 2892830, 2767329, 2767604, 1429254, 1163237, 2859983, 580342,
            587813, 588663, 588203, 200178, 164355, 165597, 166127, 143442, 143813, 165238, 180820, 181854, 
            184151, 188522, 191493, 195393, 184132, 2888614, 2630854, 2632617, 2659620, 2692526, 141326, 
            141838, 142361, 142619, 142710, 145512, 145516, 145582, 146784, 146824, 146825, 146826, 146829,
            140355, 140815, 141529, 141950, 196379 };

        public QuotesFeedDataProvider()
        {
            var rand = new Random();
            foreach (var i in _secId)
            {
                _quotesFeedData.Add(new QuotesFeed
                {
                    SecID = i,
                    Quote = rand.Next(80, 150),
                    QuoteSource = "Source " + i
                });
            }

            _timer = new Timer(5000);
            _timer.Elapsed += OnElapsed;
        }

        private void OnElapsed(object sender, ElapsedEventArgs e)
        {
            var rand = new Random();
            for (int i = 0; i < 50; i++) // count cicles
            {
                var index = rand.Next(_count);
                _quotesFeedData[index].Quote = rand.Next(80, 150);
                if (RecordChangedEvent != null)
                    RecordChangedEvent(this, new ValueChangedEventArgs
                    {
                        DataSourceUrn = @"ExternalDataSource\QuotesFeed",
                        Value = _quotesFeedData[index],
                        ChangedPropertyNames = new[] { "Quote" }
                    });
            }
        }

        public IEnumerable<Dictionary<string, object>> GetData(string[] fields = null, FilterRule[] filterRules = null, Action<string, string> onError = null)
        {
            _timer.Start();
            var list = new List<Dictionary<string, object>>();
            foreach (var quotesFeed in _quotesFeedData)
            {
                var dict = new Dictionary<string, object>();
                dict.Add("SecID",quotesFeed.SecID);
                dict.Add("Quote", quotesFeed.Quote);
                dict.Add("QuoteSource", quotesFeed.QuoteSource);
                list.Add(dict);
            }
            return list;
        }

        public RevisionInfo SubmitChanges(IEnumerable<Dictionary<string, object>> recordsToChange, IEnumerable<string> recordsToDelete, string comment = null)
        {
            //throw new NotImplementedException();
            return null;
        }

        public void UpdateSourceInfo(object sourceInfo)
        {
            throw new NotImplementedException();
        }

        public event EventHandler<ValueChangedEventArgs> RecordChangedEvent;

    }

    public class QuotesFeed
    {
        public int SecID { get; set; }

        public double Quote { get; set; }

        public string QuoteSource { get; set; }
    }
}
